;	$@(#)syscalls.master	8.6 (Berkeley) 3/30/95
; System call name/number "master" file.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, NODEF, NOARGS, or one of
;		the compatibility options defined in syscalls.conf.
;
; types:
;	STD	    always included
;	OBSOL	obsolete, not included in system
;	UNIMPL	unimplemented, not included in system
;	NODEF	included, but don't define the syscall number
;	NOARGS	included, but don't define the syscall args structure
;	INDIR	included, but don't define the syscall args structure,
;		    and allow it to be "really" varargs.
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ pseudo-proto } [alias]
; For other syscalls:
;	[comment]
;
; #ifdef's, etc. may be included, and are copied to the output files.
; #include's are copied to the syscall switch definition file only.

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/mount.h>

; Reserved/unimplemented system calls in the range 0-150 inclusive
; are reserved for use in future Berkeley releases.
; Additional system calls implemented in vendor and other
; redistributions should be placed in the reserved range at the end
; of the current calls.

0   STD     	{ int nosys(); } syscall
1   STD     	{ int rexit(); }
2   STD     	{ int fork(); }
3   STD     	{ int read(); }
4   STD     	{ int write(); }
5   STD     	{ int open(); }
6   STD     	{ int close(); }
7   STD     	{ int wait4(); }
8   UNIMPL 		old creat
9   STD     	{ int link(); }
10  STD     	{ int unlink(); }
11  STD     	{ int execv(); }
12  STD     	{ int chdir(); }
13  STD     	{ int fchdir(); }
14  STD     	{ int mknod(); }
15  STD     	{ int chmod(); }
16  STD     	{ int chown(); }
17  STD     	{ int chflags(); }
18  STD     	{ int fchflags(); }
19  STD			{ int lseek(); }
20  STD     	{ int getpid(); }
21  STD     	{ int mount(); }
22  STD     	{ int unmount(); }
23  STD     	{ int __sysctl(); }
24  STD     	{ int getuid(); }
25  STD     	{ int geteuid(); }
26  STD     	{ int ptrace(); }
27  STD     	{ int getppid(); }
28  STD     	{ int statfs(); }
29  STD     	{ int fstatfs(); }
30  STD     	{ int getfsstat(); }
31  STD     	{ int sigaction(); }
32  STD     	{ int sigprocmask(); }
33  STD     	{ int access(); }
34  STD     	{ int sigpending(); }
35  STD     	{ int sigaltstack(); }
36  STD     	{ int sync(); }
37  STD     	{ int kill(); }
38  STD			{ int stat(); }
39  STD     	{ int getlogin(); }
40  STD			{ int lstat(); }
41  STD     	{ int dup(); }
42  STD     	{ int pipe(); }
43  STD     	{ int setlogin(); }
44  STD     	{ int profil(); }
45  STD     	{ int setuid(); }
46  STD     	{ int seteuid(); }
47  STD     	{ int getgid(); }
48  STD     	{ int getegid(); }
49  STD     	{ int setgid(); }
50  STD     	{ int setegid(); }
51	STD			{ int acct(); } 
52  STD     	{ int getcontext(); } 
53   STD     	{ int setcontext(); } 
54  STD     	{ int ioctl(); }
55  STD     	{ int reboot(); }
56  STD     	{ int sigwait(); }
57  STD     	{ int symlink(); }
58  STD     	{ int readlink(); }
59  STD     	{ int execve(); }
60  STD     	{ int umask(); }
61  STD     	{ int chroot(); }
62  STD     	{ int fstat(); }
63	STD		{ int undelete(); }
64	STD	{ int getsid(); }
65  STD     	{ int pselect(); }
66  STD     	{ int vfork(); }
67	STD		{ int obreak(); } break
68  STD   		{ int sbrk(); }
69	STD			{ int sstk(); }
70	STD			{ int mmap(); }
71	STD			{ int msync(); }
72	STD			{ int munmap(); }
73	STD			{ int mprotect(); }
74	STD			{ int madvise(); }
75 	STD			{ int minherit(); }
76	STD			{ int mincore(); }
77	STD			{ int mlock(); }
78	STD			{ int munlock(); }
79  STD     	{ int getgroups(); }
80  STD     	{ int setgroups(); }
81  STD     	{ int getpgrp(); }
82  STD     	{ int setpgrp(); }
83  STD     	{ int setitimer(); }
84  STD		{ int mpx(); }
85	STD		    { int pathconf(); }
86  STD     	{ int getitimer(); }
87  STD   	    { int setsid(); } 
88  STD   	    { int setpgid(); }
89  STD     	{ int getdtablesize(); }
90  STD     	{ int dup2(); }
91  STD		{ int pipe2(); }
92  STD     	{ int fcntl(); }
93  STD     	{ int select(); }
94	STD		    { int mkfifo(); }
95  STD     	{ int fsync(); }
96  STD     	{ int setpriority(); }
97  STD     	{ int socket(); }
98  STD     	{ int connect(); }
99  STD     	{ int accept(); }
100 STD     	{ int getpriority(); }
101 STD     	{ int send(); }
102 STD     	{ int recv(); }
103 STD     	{ int sigreturn(); }
104 STD     	{ int bind(); }
105 STD     	{ int setsockopt(); }
106 STD     	{ int listen(); }
107 STD     	{ int sigsuspend(); }
108 STD 	{ int nanosleep(); }
109 STD   	{ int clock_gettime(); }
110 STD   	{ int clock_settime(); }
111 STD   	{ int poll(); }
112 STD		{ int sigstack(); }
113 STD     	{ int recvmsg(); }
114 STD     	{ int sendmsg(); }
115	STD		    { int revoke(); }
116 STD     	{ int gettimeofday(); }
117 STD     	{ int getrusage(); }
118 STD     	{ int getsockopt(); }
119	STD		    { int getdirentries(); }
120 STD     	{ int readv(); }
121 STD     	{ int writev(); }
122 STD     	{ int settimeofday(); }
123 STD     	{ int fchown(); }
124 STD     	{ int fchmod(); }
125 STD     	{ int recvfrom(); }
126 STD   	    { int setreuid(); }
127 STD   	    { int setregid(); }
128 STD     	{ int rename(); }
129	STD			{ int truncate(); }
130	STD			{ int ftruncate(); }
131 STD     	{ int flock(); }
132 STD		{ int sigtimedwait(); }
133 STD     	{ int sendto(); }
134 STD     	{ int shutdown(); }
135 STD     	{ int socketpair(); }
136 STD     	{ int mkdir(); }
137 STD     	{ int rmdir(); }
138 STD     	{ int utimes(); }
139 STD		{ int getpgid(); }
140 STD     	{ int adjtime(); }
141 STD     	{ int getpeername(); }
142 STD		{ int pread(); }
143 STD		{ int pwrite(); }
144 STD     	{ int getrlimit(); }
145 STD     	{ int setrlimit(); }
146 STD     	{ int killpg(); }
147	STD		    { int quotactl(); }
148 STD     	{ int clock_getres(); }
149 STD     	{ int issetugid(); }
150 STD     	{ int getsockname(); }
; Syscalls 151-155 are special for 2BSD
151 STD		{ int uuidgen(); }
152 STD     	{ int nostk(); }
153 OBSOL     	old fetchi
154 OBSOL     	old ucall
155 OBSOL     	old fperr
; LFS Syscalls
156	STD			{ int lfs_bmapv(); }
157	STD			{ int lfs_markv(); }
158	STD			{ int lfs_segclean(); }
159	STD			{ int lfs_segwait(); }
; New Syscalls
160 STD         { int sysarch(); }
161 STD			{ int kenv(); }
162 STD         { int kevent(); }
163 STD         { int kqueue(); }
164 STD         { int swapctl(); }
165 STD		{ int nosys(); } _syscall
#ifdef KTRACE
166 STD			{ int ktrace(); }
167 STD		{ int utrace(); }
#else 
166 UNIMPL		ktrace
167 UNIMPL		utrace
#endif
#ifdef TRACE
168 STD			{ int vtrace(); }
#else
168	UNIMPL		vtrace
#endif
169 STD		{ int acl_file(); }
170 STD		{ int acl_filedesc(); }
171 STD		{ int extattr_file(); }
172 STD		{ int extattr_filedesc(); }
173 STD		{ int preadv(); }
174 STD		{ int pwritev(); }
175 STD		{ int tls(); }
